// Code generated by MockGen. DO NOT EDIT.
// Source: database/repositories/transactionsRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	transaction "pismo-challenge/models/transaction"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTransactionsRepository is a mock of TransactionsRepository interface.
type MockTransactionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsRepositoryMockRecorder
}

// MockTransactionsRepositoryMockRecorder is the mock recorder for MockTransactionsRepository.
type MockTransactionsRepositoryMockRecorder struct {
	mock *MockTransactionsRepository
}

// NewMockTransactionsRepository creates a new mock instance.
func NewMockTransactionsRepository(ctrl *gomock.Controller) *MockTransactionsRepository {
	mock := &MockTransactionsRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsRepository) EXPECT() *MockTransactionsRepositoryMockRecorder {
	return m.recorder
}

// GetOperation mocks base method.
func (m *MockTransactionsRepository) GetOperation(operationType transaction.OperationType) *transaction.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", operationType)
	ret0, _ := ret[0].(*transaction.Operation)
	return ret0
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockTransactionsRepositoryMockRecorder) GetOperation(operationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockTransactionsRepository)(nil).GetOperation), operationType)
}

// GetTransactionsToDischarge mocks base method.
func (m *MockTransactionsRepository) GetTransactionsToDischarge(accountId int) []transaction.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsToDischarge", accountId)
	ret0, _ := ret[0].([]transaction.Transaction)
	return ret0
}

// GetTransactionsToDischarge indicates an expected call of GetTransactionsToDischarge.
func (mr *MockTransactionsRepositoryMockRecorder) GetTransactionsToDischarge(accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsToDischarge", reflect.TypeOf((*MockTransactionsRepository)(nil).GetTransactionsToDischarge), accountId)
}

// InitializeTransactionsRepository mocks base method.
func (m *MockTransactionsRepository) InitializeTransactionsRepository(db gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitializeTransactionsRepository", db)
}

// InitializeTransactionsRepository indicates an expected call of InitializeTransactionsRepository.
func (mr *MockTransactionsRepositoryMockRecorder) InitializeTransactionsRepository(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeTransactionsRepository", reflect.TypeOf((*MockTransactionsRepository)(nil).InitializeTransactionsRepository), db)
}

// InsertTransaction mocks base method.
func (m *MockTransactionsRepository) InsertTransaction(transaction *transaction.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockTransactionsRepositoryMockRecorder) InsertTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockTransactionsRepository)(nil).InsertTransaction), transaction)
}

// UpdateBalance mocks base method.
func (m *MockTransactionsRepository) UpdateBalance(trId int, balance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", trId, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockTransactionsRepositoryMockRecorder) UpdateBalance(trId, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockTransactionsRepository)(nil).UpdateBalance), trId, balance)
}
